// This is a generated source file for Chilkat version 9.5.0.21
#ifndef _C_CkMime_H
#define _C_CkMime_H
#include "chilkatDefs.h"

#include "Chilkat_C.h"

HCkMime CkMime_Create(void);
void CkMime_Dispose(HCkMime handle);
void CkMime_getBoundary(HCkMime cHandle, HCkString retval);
void CkMime_putBoundary(HCkMime cHandle, const char *newVal);
const char *CkMime_boundary(HCkMime cHandle);
void CkMime_getCharset(HCkMime cHandle, HCkString retval);
void CkMime_putCharset(HCkMime cHandle, const char *newVal);
const char *CkMime_charset(HCkMime cHandle);
void CkMime_getContentType(HCkMime cHandle, HCkString retval);
void CkMime_putContentType(HCkMime cHandle, const char *newVal);
const char *CkMime_contentType(HCkMime cHandle);
void CkMime_getCurrentDateTime(HCkMime cHandle, HCkString retval);
const char *CkMime_currentDateTime(HCkMime cHandle);
void CkMime_getDebugLogFilePath(HCkMime cHandle, HCkString retval);
void CkMime_putDebugLogFilePath(HCkMime cHandle, const char *newVal);
const char *CkMime_debugLogFilePath(HCkMime cHandle);
void CkMime_getDisposition(HCkMime cHandle, HCkString retval);
void CkMime_putDisposition(HCkMime cHandle, const char *newVal);
const char *CkMime_disposition(HCkMime cHandle);
void CkMime_getEncoding(HCkMime cHandle, HCkString retval);
void CkMime_putEncoding(HCkMime cHandle, const char *newVal);
const char *CkMime_encoding(HCkMime cHandle);
void CkMime_getFilename(HCkMime cHandle, HCkString retval);
void CkMime_putFilename(HCkMime cHandle, const char *newVal);
const char *CkMime_filename(HCkMime cHandle);
void CkMime_getLastErrorHtml(HCkMime cHandle, HCkString retval);
const char *CkMime_lastErrorHtml(HCkMime cHandle);
void CkMime_getLastErrorText(HCkMime cHandle, HCkString retval);
const char *CkMime_lastErrorText(HCkMime cHandle);
void CkMime_getLastErrorXml(HCkMime cHandle, HCkString retval);
const char *CkMime_lastErrorXml(HCkMime cHandle);
void CkMime_getMicalg(HCkMime cHandle, HCkString retval);
void CkMime_putMicalg(HCkMime cHandle, const char *newVal);
const char *CkMime_micalg(HCkMime cHandle);
void CkMime_getName(HCkMime cHandle, HCkString retval);
void CkMime_putName(HCkMime cHandle, const char *newVal);
const char *CkMime_name(HCkMime cHandle);
int CkMime_getNumEncryptCerts(HCkMime cHandle);
int CkMime_getNumHeaderFields(HCkMime cHandle);
int CkMime_getNumParts(HCkMime cHandle);
int CkMime_getNumSignerCerts(HCkMime cHandle);
void CkMime_getPkcs7CryptAlg(HCkMime cHandle, HCkString retval);
void CkMime_putPkcs7CryptAlg(HCkMime cHandle, const char *newVal);
const char *CkMime_pkcs7CryptAlg(HCkMime cHandle);
int CkMime_getPkcs7KeyLength(HCkMime cHandle);
void CkMime_putPkcs7KeyLength(HCkMime cHandle, int newVal);
void CkMime_getProtocol(HCkMime cHandle, HCkString retval);
void CkMime_putProtocol(HCkMime cHandle, const char *newVal);
const char *CkMime_protocol(HCkMime cHandle);
void CkMime_getSigningHashAlg(HCkMime cHandle, HCkString retval);
void CkMime_putSigningHashAlg(HCkMime cHandle, const char *newVal);
const char *CkMime_signingHashAlg(HCkMime cHandle);
BOOL CkMime_getUnwrapExtras(HCkMime cHandle);
void CkMime_putUnwrapExtras(HCkMime cHandle, BOOL newVal);
BOOL CkMime_getUseMmDescription(HCkMime cHandle);
void CkMime_putUseMmDescription(HCkMime cHandle, BOOL newVal);
BOOL CkMime_getUseXPkcs7(HCkMime cHandle);
void CkMime_putUseXPkcs7(HCkMime cHandle, BOOL newVal);
BOOL CkMime_getUtf8(HCkMime cHandle);
void CkMime_putUtf8(HCkMime cHandle, BOOL newVal);
BOOL CkMime_getVerboseLogging(HCkMime cHandle);
void CkMime_putVerboseLogging(HCkMime cHandle, BOOL newVal);
void CkMime_getVersion(HCkMime cHandle, HCkString retval);
const char *CkMime_version(HCkMime cHandle);
void CkMime_AddContentLength(HCkMime cHandle);
BOOL CkMime_AddDetachedSignature(HCkMime cHandle, HCkCert cert);
BOOL CkMime_AddDetachedSignature2(HCkMime cHandle, HCkCert cert, BOOL transferHeaderFields);
BOOL CkMime_AddDetachedSignaturePk(HCkMime cHandle, HCkCert cert, HCkPrivateKey privateKey);
BOOL CkMime_AddDetachedSignaturePk2(HCkMime cHandle, HCkCert cert, HCkPrivateKey privateKey, BOOL transferHeaderFields);
BOOL CkMime_AddEncryptCert(HCkMime cHandle, HCkCert cert);
BOOL CkMime_AddHeaderField(HCkMime cHandle, const char *name, const char *value);
BOOL CkMime_AddPfxSourceData(HCkMime cHandle, HCkByteData pfxFileData, const char *pfxPassword);
BOOL CkMime_AddPfxSourceFile(HCkMime cHandle, const char *pfxFilePath, const char *password);
BOOL CkMime_AppendPart(HCkMime cHandle, HCkMime mime);
BOOL CkMime_AppendPartFromFile(HCkMime cHandle, const char *filename);
BOOL CkMime_AsnBodyToXml(HCkMime cHandle, HCkString outStr);
const char *CkMime_asnBodyToXml(HCkMime cHandle);
void CkMime_ClearEncryptCerts(HCkMime cHandle);
BOOL CkMime_ContainsEncryptedParts(HCkMime cHandle);
BOOL CkMime_ContainsSignedParts(HCkMime cHandle);
void CkMime_Convert8Bit(HCkMime cHandle);
BOOL CkMime_ConvertToMultipartAlt(HCkMime cHandle);
BOOL CkMime_ConvertToMultipartMixed(HCkMime cHandle);
BOOL CkMime_ConvertToSigned(HCkMime cHandle, HCkCert cert);
BOOL CkMime_ConvertToSignedPk(HCkMime cHandle, HCkCert cert, HCkPrivateKey privateKey);
BOOL CkMime_Decrypt(HCkMime cHandle);
BOOL CkMime_Decrypt2(HCkMime cHandle, HCkCert cert, HCkPrivateKey privateKey);
BOOL CkMime_DecryptUsingPfxData(HCkMime cHandle, HCkByteData pfxData, const char *password);
BOOL CkMime_DecryptUsingPfxFile(HCkMime cHandle, const char *pfxFilePath, const char *pfxPassword);
BOOL CkMime_Encrypt(HCkMime cHandle, HCkCert cert);
BOOL CkMime_EncryptN(HCkMime cHandle);
#ifndef MOBILE_MIME
HCkStringArray CkMime_ExtractPartsToFiles(HCkMime cHandle, const char *dirPath);
#endif
HCkCert CkMime_FindIssuer(HCkMime cHandle, HCkCert cert);
BOOL CkMime_GetBodyBinary(HCkMime cHandle, HCkByteData outData);
BOOL CkMime_GetBodyDecoded(HCkMime cHandle, HCkString outStr);
const char *CkMime_getBodyDecoded(HCkMime cHandle);
BOOL CkMime_GetBodyEncoded(HCkMime cHandle, HCkString outStr);
const char *CkMime_getBodyEncoded(HCkMime cHandle);
HCkCert CkMime_GetEncryptCert(HCkMime cHandle, int index);
BOOL CkMime_GetEntireBody(HCkMime cHandle, HCkString outStr);
const char *CkMime_getEntireBody(HCkMime cHandle);
BOOL CkMime_GetEntireHead(HCkMime cHandle, HCkString outStr);
const char *CkMime_getEntireHead(HCkMime cHandle);
BOOL CkMime_GetHeaderField(HCkMime cHandle, const char *fieldName, HCkString outStr);
const char *CkMime_getHeaderField(HCkMime cHandle, const char *fieldName);
BOOL CkMime_GetHeaderFieldAttribute(HCkMime cHandle, const char *name, const char *attrName, HCkString outStr);
const char *CkMime_getHeaderFieldAttribute(HCkMime cHandle, const char *name, const char *attrName);
BOOL CkMime_GetHeaderFieldName(HCkMime cHandle, int index, HCkString outStr);
const char *CkMime_getHeaderFieldName(HCkMime cHandle, int index);
BOOL CkMime_GetHeaderFieldValue(HCkMime cHandle, int index, HCkString outStr);
const char *CkMime_getHeaderFieldValue(HCkMime cHandle, int index);
BOOL CkMime_GetMime(HCkMime cHandle, HCkString outStr);
const char *CkMime_getMime(HCkMime cHandle);
BOOL CkMime_GetMimeBytes(HCkMime cHandle, HCkByteData outBytes);
HCkMime CkMime_GetPart(HCkMime cHandle, int index);
BOOL CkMime_GetSignatureSigningTime(HCkMime cHandle, int index, SYSTEMTIME *outSysTime);
BOOL CkMime_GetSignatureSigningTimeStr(HCkMime cHandle, int index, HCkString outStr);
const char *CkMime_getSignatureSigningTimeStr(HCkMime cHandle, int index);
HCkCert CkMime_GetSignerCert(HCkMime cHandle, int index);
BOOL CkMime_GetXml(HCkMime cHandle, HCkString outStr);
const char *CkMime_getXml(HCkMime cHandle);
BOOL CkMime_HasSignatureSigningTime(HCkMime cHandle, int index);
BOOL CkMime_IsApplicationData(HCkMime cHandle);
BOOL CkMime_IsAttachment(HCkMime cHandle);
BOOL CkMime_IsAudio(HCkMime cHandle);
BOOL CkMime_IsEncrypted(HCkMime cHandle);
BOOL CkMime_IsHtml(HCkMime cHandle);
BOOL CkMime_IsImage(HCkMime cHandle);
BOOL CkMime_IsMultipart(HCkMime cHandle);
BOOL CkMime_IsMultipartAlternative(HCkMime cHandle);
BOOL CkMime_IsMultipartMixed(HCkMime cHandle);
BOOL CkMime_IsMultipartRelated(HCkMime cHandle);
BOOL CkMime_IsPlainText(HCkMime cHandle);
BOOL CkMime_IsSigned(HCkMime cHandle);
BOOL CkMime_IsText(HCkMime cHandle);
BOOL CkMime_IsUnlocked(HCkMime cHandle);
BOOL CkMime_IsVideo(HCkMime cHandle);
BOOL CkMime_IsXml(HCkMime cHandle);
BOOL CkMime_LoadMime(HCkMime cHandle, const char *mimeMsg);
BOOL CkMime_LoadMimeBytes(HCkMime cHandle, HCkByteData binData);
BOOL CkMime_LoadMimeFile(HCkMime cHandle, const char *fileName);
BOOL CkMime_LoadXml(HCkMime cHandle, const char *xml);
BOOL CkMime_LoadXmlFile(HCkMime cHandle, const char *fileName);
BOOL CkMime_NewMessageRfc822(HCkMime cHandle, HCkMime mimeObject);
BOOL CkMime_NewMultipartAlternative(HCkMime cHandle);
BOOL CkMime_NewMultipartMixed(HCkMime cHandle);
BOOL CkMime_NewMultipartRelated(HCkMime cHandle);
void CkMime_RemoveHeaderField(HCkMime cHandle, const char *fieldName, BOOL bAllOccurances);
BOOL CkMime_RemovePart(HCkMime cHandle, int index);
BOOL CkMime_SaveBody(HCkMime cHandle, const char *filename);
BOOL CkMime_SaveLastError(HCkMime cHandle, const char *path);
BOOL CkMime_SaveMime(HCkMime cHandle, const char *filename);
BOOL CkMime_SaveXml(HCkMime cHandle, const char *filename);
void CkMime_SetBody(HCkMime cHandle, const char *str);
BOOL CkMime_SetBodyFromBinary(HCkMime cHandle, HCkByteData binData);
BOOL CkMime_SetBodyFromEncoded(HCkMime cHandle, const char *encoding, const char *str);
BOOL CkMime_SetBodyFromFile(HCkMime cHandle, const char *fileName);
BOOL CkMime_SetBodyFromHtml(HCkMime cHandle, const char *str);
BOOL CkMime_SetBodyFromPlainText(HCkMime cHandle, const char *str);
BOOL CkMime_SetBodyFromXml(HCkMime cHandle, const char *str);
#if defined(CK_CSP_INCLUDED)
BOOL CkMime_SetCSP(HCkMime cHandle, HCkCsp csp);
#endif
BOOL CkMime_SetHeaderField(HCkMime cHandle, const char *name, const char *value);
void CkMime_SetVerifyCert(HCkMime cHandle, HCkCert cert);
BOOL CkMime_UnlockComponent(HCkMime cHandle, const char *unlockCode);
BOOL CkMime_UnwrapSecurity(HCkMime cHandle);
void CkMime_UrlEncodeBody(HCkMime cHandle, const char *charset);
BOOL CkMime_Verify(HCkMime cHandle);
#endif
