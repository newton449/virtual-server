// This is a generated source file for Chilkat version 9.5.0.21
#ifndef _C_CkSshWH
#define _C_CkSshWH
#include "chilkatDefs.h"

#include "Chilkat_C.h"

HCkSshW CkSshW_Create(void);
HCkSshW CkSshW_Create2(BOOL bCallbackOwned);
void CkSshW_Dispose(HCkSshW handle);
int CkSshW_getChannelOpenFailCode(HCkSshW cHandle);
void CkSshW_getChannelOpenFailReason(HCkSshW cHandle, HCkString retval);
const wchar_t *CkSshW_channelOpenFailReason(HCkSshW cHandle);
void CkSshW_getClientIdentifier(HCkSshW cHandle, HCkString retval);
void CkSshW_putClientIdentifier(HCkSshW cHandle, const wchar_t *newVal);
const wchar_t *CkSshW_clientIdentifier(HCkSshW cHandle);
void CkSshW_getClientIpAddress(HCkSshW cHandle, HCkString retval);
void CkSshW_putClientIpAddress(HCkSshW cHandle, const wchar_t *newVal);
const wchar_t *CkSshW_clientIpAddress(HCkSshW cHandle);
int CkSshW_getConnectTimeoutMs(HCkSshW cHandle);
void CkSshW_putConnectTimeoutMs(HCkSshW cHandle, int newVal);
void CkSshW_getDebugLogFilePath(HCkSshW cHandle, HCkString retval);
void CkSshW_putDebugLogFilePath(HCkSshW cHandle, const wchar_t *newVal);
const wchar_t *CkSshW_debugLogFilePath(HCkSshW cHandle);
int CkSshW_getDisconnectCode(HCkSshW cHandle);
void CkSshW_getDisconnectReason(HCkSshW cHandle, HCkString retval);
const wchar_t *CkSshW_disconnectReason(HCkSshW cHandle);
void CkSshW_getForceCipher(HCkSshW cHandle, HCkString retval);
void CkSshW_putForceCipher(HCkSshW cHandle, const wchar_t *newVal);
const wchar_t *CkSshW_forceCipher(HCkSshW cHandle);
int CkSshW_getHeartbeatMs(HCkSshW cHandle);
void CkSshW_putHeartbeatMs(HCkSshW cHandle, int newVal);
void CkSshW_getHostKeyAlg(HCkSshW cHandle, HCkString retval);
void CkSshW_putHostKeyAlg(HCkSshW cHandle, const wchar_t *newVal);
const wchar_t *CkSshW_hostKeyAlg(HCkSshW cHandle);
void CkSshW_getHostKeyFingerprint(HCkSshW cHandle, HCkString retval);
const wchar_t *CkSshW_hostKeyFingerprint(HCkSshW cHandle);
void CkSshW_getHttpProxyAuthMethod(HCkSshW cHandle, HCkString retval);
void CkSshW_putHttpProxyAuthMethod(HCkSshW cHandle, const wchar_t *newVal);
const wchar_t *CkSshW_httpProxyAuthMethod(HCkSshW cHandle);
void CkSshW_getHttpProxyDomain(HCkSshW cHandle, HCkString retval);
void CkSshW_putHttpProxyDomain(HCkSshW cHandle, const wchar_t *newVal);
const wchar_t *CkSshW_httpProxyDomain(HCkSshW cHandle);
void CkSshW_getHttpProxyHostname(HCkSshW cHandle, HCkString retval);
void CkSshW_putHttpProxyHostname(HCkSshW cHandle, const wchar_t *newVal);
const wchar_t *CkSshW_httpProxyHostname(HCkSshW cHandle);
void CkSshW_getHttpProxyPassword(HCkSshW cHandle, HCkString retval);
void CkSshW_putHttpProxyPassword(HCkSshW cHandle, const wchar_t *newVal);
const wchar_t *CkSshW_httpProxyPassword(HCkSshW cHandle);
int CkSshW_getHttpProxyPort(HCkSshW cHandle);
void CkSshW_putHttpProxyPort(HCkSshW cHandle, int newVal);
void CkSshW_getHttpProxyUsername(HCkSshW cHandle, HCkString retval);
void CkSshW_putHttpProxyUsername(HCkSshW cHandle, const wchar_t *newVal);
const wchar_t *CkSshW_httpProxyUsername(HCkSshW cHandle);
int CkSshW_getIdleTimeoutMs(HCkSshW cHandle);
void CkSshW_putIdleTimeoutMs(HCkSshW cHandle, int newVal);
BOOL CkSshW_getIsConnected(HCkSshW cHandle);
BOOL CkSshW_getKeepSessionLog(HCkSshW cHandle);
void CkSshW_putKeepSessionLog(HCkSshW cHandle, BOOL newVal);
void CkSshW_getLastErrorHtml(HCkSshW cHandle, HCkString retval);
const wchar_t *CkSshW_lastErrorHtml(HCkSshW cHandle);
void CkSshW_getLastErrorText(HCkSshW cHandle, HCkString retval);
const wchar_t *CkSshW_lastErrorText(HCkSshW cHandle);
void CkSshW_getLastErrorXml(HCkSshW cHandle, HCkString retval);
const wchar_t *CkSshW_lastErrorXml(HCkSshW cHandle);
int CkSshW_getMaxPacketSize(HCkSshW cHandle);
void CkSshW_putMaxPacketSize(HCkSshW cHandle, int newVal);
int CkSshW_getNumOpenChannels(HCkSshW cHandle);
BOOL CkSshW_getPasswordChangeRequested(HCkSshW cHandle);
int CkSshW_getReadTimeoutMs(HCkSshW cHandle);
void CkSshW_putReadTimeoutMs(HCkSshW cHandle, int newVal);
void CkSshW_getSessionLog(HCkSshW cHandle, HCkString retval);
const wchar_t *CkSshW_sessionLog(HCkSshW cHandle);
int CkSshW_getSoRcvBuf(HCkSshW cHandle);
void CkSshW_putSoRcvBuf(HCkSshW cHandle, int newVal);
int CkSshW_getSoSndBuf(HCkSshW cHandle);
void CkSshW_putSoSndBuf(HCkSshW cHandle, int newVal);
void CkSshW_getSocksHostname(HCkSshW cHandle, HCkString retval);
void CkSshW_putSocksHostname(HCkSshW cHandle, const wchar_t *newVal);
const wchar_t *CkSshW_socksHostname(HCkSshW cHandle);
void CkSshW_getSocksPassword(HCkSshW cHandle, HCkString retval);
void CkSshW_putSocksPassword(HCkSshW cHandle, const wchar_t *newVal);
const wchar_t *CkSshW_socksPassword(HCkSshW cHandle);
int CkSshW_getSocksPort(HCkSshW cHandle);
void CkSshW_putSocksPort(HCkSshW cHandle, int newVal);
void CkSshW_getSocksUsername(HCkSshW cHandle, HCkString retval);
void CkSshW_putSocksUsername(HCkSshW cHandle, const wchar_t *newVal);
const wchar_t *CkSshW_socksUsername(HCkSshW cHandle);
int CkSshW_getSocksVersion(HCkSshW cHandle);
void CkSshW_putSocksVersion(HCkSshW cHandle, int newVal);
BOOL CkSshW_getStderrToStdout(HCkSshW cHandle);
void CkSshW_putStderrToStdout(HCkSshW cHandle, BOOL newVal);
BOOL CkSshW_getTcpNoDelay(HCkSshW cHandle);
void CkSshW_putTcpNoDelay(HCkSshW cHandle, BOOL newVal);
BOOL CkSshW_getVerboseLogging(HCkSshW cHandle);
void CkSshW_putVerboseLogging(HCkSshW cHandle, BOOL newVal);
void CkSshW_getVersion(HCkSshW cHandle, HCkString retval);
const wchar_t *CkSshW_version(HCkSshW cHandle);
BOOL CkSshW_AuthenticatePk(HCkSshW cHandle, const wchar_t *username, HCkSshKeyW privateKey);
BOOL CkSshW_AuthenticatePw(HCkSshW cHandle, const wchar_t *login, const wchar_t *password);
BOOL CkSshW_AuthenticatePwPk(HCkSshW cHandle, const wchar_t *username, const wchar_t *password, HCkSshKeyW privateKey);
BOOL CkSshW_ChannelIsOpen(HCkSshW cHandle, int channelNum);
int CkSshW_ChannelPoll(HCkSshW cHandle, int channelNum, int pollTimeoutMs);
int CkSshW_ChannelRead(HCkSshW cHandle, int channelNum);
int CkSshW_ChannelReadAndPoll(HCkSshW cHandle, int channelNum, int pollTimeoutMs);
int CkSshW_ChannelReadAndPoll2(HCkSshW cHandle, int channelNum, int pollTimeoutMs, int maxNumBytes);
BOOL CkSshW_ChannelReceiveToClose(HCkSshW cHandle, int channelNum);
BOOL CkSshW_ChannelReceiveUntilMatch(HCkSshW cHandle, int channelNum, const wchar_t *matchPattern, const wchar_t *charset, BOOL caseSensitive);
BOOL CkSshW_ChannelReceiveUntilMatchN(HCkSshW cHandle, int channelNum, HCkStringArrayW matchPatterns, const wchar_t *charset, BOOL caseSensitive);
BOOL CkSshW_ChannelReceivedClose(HCkSshW cHandle, int channelNum);
BOOL CkSshW_ChannelReceivedEof(HCkSshW cHandle, int channelNum);
BOOL CkSshW_ChannelReceivedExitStatus(HCkSshW cHandle, int channelNum);
BOOL CkSshW_ChannelSendClose(HCkSshW cHandle, int channelNum);
BOOL CkSshW_ChannelSendData(HCkSshW cHandle, int channelNum, HCkByteData byteData);
BOOL CkSshW_ChannelSendEof(HCkSshW cHandle, int channelNum);
BOOL CkSshW_ChannelSendString(HCkSshW cHandle, int channelNum, const wchar_t *textData, const wchar_t *charset);
void CkSshW_ClearTtyModes(HCkSshW cHandle);
BOOL CkSshW_Connect(HCkSshW cHandle, const wchar_t *domainName, int port);
void CkSshW_Disconnect(HCkSshW cHandle);
int CkSshW_GetChannelExitStatus(HCkSshW cHandle, int channelNum);
int CkSshW_GetChannelNumber(HCkSshW cHandle, int index);
BOOL CkSshW_GetChannelType(HCkSshW cHandle, int index, HCkString outStr);
const wchar_t *CkSshW_getChannelType(HCkSshW cHandle, int index);
BOOL CkSshW_GetReceivedData(HCkSshW cHandle, int channelNum, HCkByteData outBytes);
BOOL CkSshW_GetReceivedDataN(HCkSshW cHandle, int channelNum, int maxNumBytes, HCkByteData outBytes);
int CkSshW_GetReceivedNumBytes(HCkSshW cHandle, int channelNum);
BOOL CkSshW_GetReceivedStderr(HCkSshW cHandle, int channelNum, HCkByteData outBytes);
BOOL CkSshW_GetReceivedText(HCkSshW cHandle, int channelNum, const wchar_t *charset, HCkString outStr);
const wchar_t *CkSshW_getReceivedText(HCkSshW cHandle, int channelNum, const wchar_t *charset);
BOOL CkSshW_GetReceivedTextS(HCkSshW cHandle, int channelNum, const wchar_t *substr, const wchar_t *charset, HCkString outStr);
const wchar_t *CkSshW_getReceivedTextS(HCkSshW cHandle, int channelNum, const wchar_t *substr, const wchar_t *charset);
int CkSshW_OpenCustomChannel(HCkSshW cHandle, const wchar_t *channelType);
int CkSshW_OpenDirectTcpIpChannel(HCkSshW cHandle, const wchar_t *targetHostname, int targetPort);
int CkSshW_OpenSessionChannel(HCkSshW cHandle);
BOOL CkSshW_PeekReceivedText(HCkSshW cHandle, int channelNum, const wchar_t *charset, HCkString outStr);
const wchar_t *CkSshW_peekReceivedText(HCkSshW cHandle, int channelNum, const wchar_t *charset);
BOOL CkSshW_ReKey(HCkSshW cHandle);
BOOL CkSshW_SaveLastError(HCkSshW cHandle, const wchar_t *path);
BOOL CkSshW_SendIgnore(HCkSshW cHandle);
BOOL CkSshW_SendReqExec(HCkSshW cHandle, int channelNum, const wchar_t *commandLine);
BOOL CkSshW_SendReqPty(HCkSshW cHandle, int channelNum, const wchar_t *termType, int widthInChars, int heightInChars, int widthInPixels, int heightInPixels);
BOOL CkSshW_SendReqSetEnv(HCkSshW cHandle, int channelNum, const wchar_t *name, const wchar_t *value);
BOOL CkSshW_SendReqShell(HCkSshW cHandle, int channelNum);
BOOL CkSshW_SendReqSignal(HCkSshW cHandle, int channelNum, const wchar_t *signalName);
BOOL CkSshW_SendReqSubsystem(HCkSshW cHandle, int channelNum, const wchar_t *subsystemName);
BOOL CkSshW_SendReqWindowChange(HCkSshW cHandle, int channelNum, int widthInChars, int heightInRows, int pixWidth, int pixHeight);
BOOL CkSshW_SendReqX11Forwarding(HCkSshW cHandle, int channelNum, BOOL singleConnection, const wchar_t *authProt, const wchar_t *authCookie, int screenNum);
BOOL CkSshW_SendReqXonXoff(HCkSshW cHandle, int channelNum, BOOL clientCanDo);
BOOL CkSshW_SetTtyMode(HCkSshW cHandle, const wchar_t *ttyName, int ttyValue);
BOOL CkSshW_UnlockComponent(HCkSshW cHandle, const wchar_t *unlockCode);
#endif
