// This is a generated source file for Chilkat version 9.5.0.21
#ifndef _C_CkMhtWH
#define _C_CkMhtWH
#include "chilkatDefs.h"

#include "Chilkat_C.h"

HCkMhtW CkMhtW_Create(void);
HCkMhtW CkMhtW_Create2(BOOL bCallbackOwned);
void CkMhtW_Dispose(HCkMhtW handle);
void CkMhtW_getBaseUrl(HCkMhtW cHandle, HCkString retval);
void CkMhtW_putBaseUrl(HCkMhtW cHandle, const wchar_t *newVal);
const wchar_t *CkMhtW_baseUrl(HCkMhtW cHandle);
int CkMhtW_getConnectTimeout(HCkMhtW cHandle);
void CkMhtW_putConnectTimeout(HCkMhtW cHandle, int newVal);
void CkMhtW_getDebugHtmlAfter(HCkMhtW cHandle, HCkString retval);
void CkMhtW_putDebugHtmlAfter(HCkMhtW cHandle, const wchar_t *newVal);
const wchar_t *CkMhtW_debugHtmlAfter(HCkMhtW cHandle);
void CkMhtW_getDebugHtmlBefore(HCkMhtW cHandle, HCkString retval);
void CkMhtW_putDebugHtmlBefore(HCkMhtW cHandle, const wchar_t *newVal);
const wchar_t *CkMhtW_debugHtmlBefore(HCkMhtW cHandle);
void CkMhtW_getDebugLogFilePath(HCkMhtW cHandle, HCkString retval);
void CkMhtW_putDebugLogFilePath(HCkMhtW cHandle, const wchar_t *newVal);
const wchar_t *CkMhtW_debugLogFilePath(HCkMhtW cHandle);
BOOL CkMhtW_getDebugTagCleaning(HCkMhtW cHandle);
void CkMhtW_putDebugTagCleaning(HCkMhtW cHandle, BOOL newVal);
BOOL CkMhtW_getEmbedImages(HCkMhtW cHandle);
void CkMhtW_putEmbedImages(HCkMhtW cHandle, BOOL newVal);
BOOL CkMhtW_getEmbedLocalOnly(HCkMhtW cHandle);
void CkMhtW_putEmbedLocalOnly(HCkMhtW cHandle, BOOL newVal);
BOOL CkMhtW_getFetchFromCache(HCkMhtW cHandle);
void CkMhtW_putFetchFromCache(HCkMhtW cHandle, BOOL newVal);
int CkMhtW_getHeartbeatMs(HCkMhtW cHandle);
void CkMhtW_putHeartbeatMs(HCkMhtW cHandle, int newVal);
BOOL CkMhtW_getIgnoreMustRevalidate(HCkMhtW cHandle);
void CkMhtW_putIgnoreMustRevalidate(HCkMhtW cHandle, BOOL newVal);
BOOL CkMhtW_getIgnoreNoCache(HCkMhtW cHandle);
void CkMhtW_putIgnoreNoCache(HCkMhtW cHandle, BOOL newVal);
void CkMhtW_getLastErrorHtml(HCkMhtW cHandle, HCkString retval);
const wchar_t *CkMhtW_lastErrorHtml(HCkMhtW cHandle);
void CkMhtW_getLastErrorText(HCkMhtW cHandle, HCkString retval);
const wchar_t *CkMhtW_lastErrorText(HCkMhtW cHandle);
void CkMhtW_getLastErrorXml(HCkMhtW cHandle, HCkString retval);
const wchar_t *CkMhtW_lastErrorXml(HCkMhtW cHandle);
BOOL CkMhtW_getNoScripts(HCkMhtW cHandle);
void CkMhtW_putNoScripts(HCkMhtW cHandle, BOOL newVal);
BOOL CkMhtW_getNtlmAuth(HCkMhtW cHandle);
void CkMhtW_putNtlmAuth(HCkMhtW cHandle, BOOL newVal);
int CkMhtW_getNumCacheLevels(HCkMhtW cHandle);
void CkMhtW_putNumCacheLevels(HCkMhtW cHandle, int newVal);
int CkMhtW_getNumCacheRoots(HCkMhtW cHandle);
BOOL CkMhtW_getPreferMHTScripts(HCkMhtW cHandle);
void CkMhtW_putPreferMHTScripts(HCkMhtW cHandle, BOOL newVal);
void CkMhtW_getProxy(HCkMhtW cHandle, HCkString retval);
void CkMhtW_putProxy(HCkMhtW cHandle, const wchar_t *newVal);
const wchar_t *CkMhtW_proxy(HCkMhtW cHandle);
void CkMhtW_getProxyLogin(HCkMhtW cHandle, HCkString retval);
void CkMhtW_putProxyLogin(HCkMhtW cHandle, const wchar_t *newVal);
const wchar_t *CkMhtW_proxyLogin(HCkMhtW cHandle);
void CkMhtW_getProxyPassword(HCkMhtW cHandle, HCkString retval);
void CkMhtW_putProxyPassword(HCkMhtW cHandle, const wchar_t *newVal);
const wchar_t *CkMhtW_proxyPassword(HCkMhtW cHandle);
int CkMhtW_getReadTimeout(HCkMhtW cHandle);
void CkMhtW_putReadTimeout(HCkMhtW cHandle, int newVal);
void CkMhtW_getSocksHostname(HCkMhtW cHandle, HCkString retval);
void CkMhtW_putSocksHostname(HCkMhtW cHandle, const wchar_t *newVal);
const wchar_t *CkMhtW_socksHostname(HCkMhtW cHandle);
void CkMhtW_getSocksPassword(HCkMhtW cHandle, HCkString retval);
void CkMhtW_putSocksPassword(HCkMhtW cHandle, const wchar_t *newVal);
const wchar_t *CkMhtW_socksPassword(HCkMhtW cHandle);
int CkMhtW_getSocksPort(HCkMhtW cHandle);
void CkMhtW_putSocksPort(HCkMhtW cHandle, int newVal);
void CkMhtW_getSocksUsername(HCkMhtW cHandle, HCkString retval);
void CkMhtW_putSocksUsername(HCkMhtW cHandle, const wchar_t *newVal);
const wchar_t *CkMhtW_socksUsername(HCkMhtW cHandle);
int CkMhtW_getSocksVersion(HCkMhtW cHandle);
void CkMhtW_putSocksVersion(HCkMhtW cHandle, int newVal);
BOOL CkMhtW_getUnpackUseRelPaths(HCkMhtW cHandle);
void CkMhtW_putUnpackUseRelPaths(HCkMhtW cHandle, BOOL newVal);
BOOL CkMhtW_getUpdateCache(HCkMhtW cHandle);
void CkMhtW_putUpdateCache(HCkMhtW cHandle, BOOL newVal);
BOOL CkMhtW_getUseCids(HCkMhtW cHandle);
void CkMhtW_putUseCids(HCkMhtW cHandle, BOOL newVal);
BOOL CkMhtW_getUseFilename(HCkMhtW cHandle);
void CkMhtW_putUseFilename(HCkMhtW cHandle, BOOL newVal);
BOOL CkMhtW_getUseIEProxy(HCkMhtW cHandle);
void CkMhtW_putUseIEProxy(HCkMhtW cHandle, BOOL newVal);
BOOL CkMhtW_getUseInline(HCkMhtW cHandle);
void CkMhtW_putUseInline(HCkMhtW cHandle, BOOL newVal);
BOOL CkMhtW_getVerboseLogging(HCkMhtW cHandle);
void CkMhtW_putVerboseLogging(HCkMhtW cHandle, BOOL newVal);
void CkMhtW_getVersion(HCkMhtW cHandle, HCkString retval);
const wchar_t *CkMhtW_version(HCkMhtW cHandle);
void CkMhtW_getWebSiteLogin(HCkMhtW cHandle, HCkString retval);
void CkMhtW_putWebSiteLogin(HCkMhtW cHandle, const wchar_t *newVal);
const wchar_t *CkMhtW_webSiteLogin(HCkMhtW cHandle);
void CkMhtW_getWebSiteLoginDomain(HCkMhtW cHandle, HCkString retval);
void CkMhtW_putWebSiteLoginDomain(HCkMhtW cHandle, const wchar_t *newVal);
const wchar_t *CkMhtW_webSiteLoginDomain(HCkMhtW cHandle);
void CkMhtW_getWebSitePassword(HCkMhtW cHandle, HCkString retval);
void CkMhtW_putWebSitePassword(HCkMhtW cHandle, const wchar_t *newVal);
const wchar_t *CkMhtW_webSitePassword(HCkMhtW cHandle);
void CkMhtW_AddCacheRoot(HCkMhtW cHandle, const wchar_t *dir);
void CkMhtW_AddCustomHeader(HCkMhtW cHandle, const wchar_t *name, const wchar_t *value);
void CkMhtW_AddExternalStyleSheet(HCkMhtW cHandle, const wchar_t *url);
void CkMhtW_ClearCustomHeaders(HCkMhtW cHandle);
void CkMhtW_ExcludeImagesMatching(HCkMhtW cHandle, const wchar_t *pattern);
BOOL CkMhtW_GetAndSaveEML(HCkMhtW cHandle, const wchar_t *url_or_htmlFilepath, const wchar_t *outputEmlFilename);
BOOL CkMhtW_GetAndSaveMHT(HCkMhtW cHandle, const wchar_t *url_or_htmlFilepath, const wchar_t *outputMhtFilename);
BOOL CkMhtW_GetAndZipEML(HCkMhtW cHandle, const wchar_t *url_or_htmlFilepath, const wchar_t *zipEntryFilename, const wchar_t *zipFilename);
BOOL CkMhtW_GetAndZipMHT(HCkMhtW cHandle, const wchar_t *url_or_htmlFilepath, const wchar_t *zipEntryFilename, const wchar_t *zipFilename);
BOOL CkMhtW_GetCacheRoot(HCkMhtW cHandle, int index, HCkString outStr);
const wchar_t *CkMhtW_getCacheRoot(HCkMhtW cHandle, int index);
BOOL CkMhtW_GetEML(HCkMhtW cHandle, const wchar_t *url_or_htmlFilepath, HCkString outStr);
const wchar_t *CkMhtW_getEML(HCkMhtW cHandle, const wchar_t *url_or_htmlFilepath);
BOOL CkMhtW_GetMHT(HCkMhtW cHandle, const wchar_t *url_or_htmlFilepath, HCkString outStr);
const wchar_t *CkMhtW_getMHT(HCkMhtW cHandle, const wchar_t *url_or_htmlFilepath);
BOOL CkMhtW_HtmlToEML(HCkMhtW cHandle, const wchar_t *htmlText, HCkString outStr);
const wchar_t *CkMhtW_htmlToEML(HCkMhtW cHandle, const wchar_t *htmlText);
BOOL CkMhtW_HtmlToEMLFile(HCkMhtW cHandle, const wchar_t *html, const wchar_t *emlFilename);
BOOL CkMhtW_HtmlToMHT(HCkMhtW cHandle, const wchar_t *htmlText, HCkString outStr);
const wchar_t *CkMhtW_htmlToMHT(HCkMhtW cHandle, const wchar_t *htmlText);
BOOL CkMhtW_HtmlToMHTFile(HCkMhtW cHandle, const wchar_t *html, const wchar_t *mhtFilename);
BOOL CkMhtW_IsUnlocked(HCkMhtW cHandle);
void CkMhtW_RemoveCustomHeader(HCkMhtW cHandle, const wchar_t *name);
void CkMhtW_RestoreDefaults(HCkMhtW cHandle);
BOOL CkMhtW_SaveLastError(HCkMhtW cHandle, const wchar_t *path);
BOOL CkMhtW_UnlockComponent(HCkMhtW cHandle, const wchar_t *unlockCode);
BOOL CkMhtW_UnpackMHT(HCkMhtW cHandle, const wchar_t *mhtFilename, const wchar_t *unpackDir, const wchar_t *outputHtmlFilename, const wchar_t *partsSubDir);
BOOL CkMhtW_UnpackMHTString(HCkMhtW cHandle, const wchar_t *mhtString, const wchar_t *unpackDir, const wchar_t *outputHtmlFilename, const wchar_t *partsSubDir);
#endif
